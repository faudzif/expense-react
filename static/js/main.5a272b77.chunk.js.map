{"version":3,"sources":["components/Box.js","redux/actions/actionTypes.js","utilis/recordsAPI.js","redux/actions/rowActions.js","components/Form.js","components/Row.js","components/Table.js","components/Dashboard.js","App.js","serviceWorker.js","redux/reducers/intialState.js","redux/reducers/index.js","redux/reducers/rowReducer.js","index.js","redux/configureStore.js"],"names":["Box","props","react_default","a","createElement","className","concat","bgType","heading","amount","LOAD_ROWS_SUCCESS","CREATE_ROW_SUCCESS","UPDATE_ROW_SUCCESS","FORM_ONCHANGE","FORM_SUBMIT","DELETE_ROW_OPTIMISTIC","api","process","REACT_APP_RECORDS_API_URL","getAll","axios","get","create","body","post","update","id","put","remove","delete","formOnChange","e","type","types","formSubmit","data","loadRowsSuccess","rows","createRowSuccess","row","updateRowSuccess","deleteRowOptimistic","loadRows","dispatch","recordsAPI","then","catch","error","console","log","message","createRow","updateRow","deleteRow","Form","handleOnSubmit","preventDefault","_this","refs","date","value","title","newRowsData","state","rowsData","Number","parseInt","_this2","this","onSubmit","onChange","placeholder","name","ref","disabled","Component","connect","Row","isEdit","handleToggle","setState","handleUpdate","entry","onClick","actions","_this3","defaultValue","rowDisplay","rowEdit","_ref","bindActionCreators","rowActions","rowData","length","map","components_Row","key","status","colSpan","Dashboard","credit","reduce","prevValue","currentValue","debit","balance","getDataFromRow","index","findIndex","x","Object","toConsumableArray","slice","assign","_this$props","components_Box","components_Form","components_Table","mapDispatchToProps","App","components_Dashboard","Boolean","window","location","hostname","match","intialState","rootReducer","combineReducers","arguments","undefined","action","newRow","filter","objectSpread","target","obj","Math","random","store","initialState","compseEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","reduxImmutableStateInvariant","configureStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a272b77.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Box = props => {\r\n  return (\r\n    <div className=\"col\">\r\n      <div className=\"card\">\r\n        <div className={`card-header bg-${props.bgType} text-white`}>\r\n          {props.heading}\r\n        </div>\r\n        <div className=\"card-body\">{props.amount}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Box;\r\n","export const LOAD_ROWS_SUCCESS = \"LOAD_ROWS_SUCCESS\";\r\nexport const CREATE_ROW_SUCCESS = \"CREATE_ROW_SUCCESS\";\r\nexport const UPDATE_ROW_SUCCESS = \"UPDATE_ROW_SUCCESS\";\r\nexport const FORM_ONCHANGE = \"FORM_ONCHANGE\";\r\nexport const FORM_SUBMIT = \"FORM_SUBMIT\";\r\n\r\n\r\nexport const DELETE_ROW_OPTIMISTIC = \"DELETE_ROW_OPTIMISTIC\";\r\n","import axios from \"axios\";\r\n\r\nconst api =\r\n  process.env.REACT_APP_RECORDS_API_URL ||\r\n  \"https://5cd013045b71f40014dc1292.mockapi.io\";\r\n\r\nexport const getAll = () => axios.get(`${api}/api/v1/records`);\r\n\r\nexport const create = body => {\r\n  return axios.post(`${api}/api/v1/records`, body);\r\n};\r\n\r\nexport const update = (id, body) =>\r\n  axios.put(`${api}/api/v1/records/${id}`, body);\r\n\r\nexport const remove = id => {\r\n  return axios.delete(`${api}/api/v1/records/${id}`);\r\n};\r\n","import * as types from \"./actionTypes\";\r\n\r\nimport * as recordsAPI from \"../../utilis/recordsAPI\";\r\n\r\nexport const formOnChange = e => {\r\n  return { type: types.FORM_ONCHANGE, e };\r\n};\r\n\r\nexport const formSubmit = (e, data) => {\r\n  return { type: types.FORM_SUBMIT, e, data };\r\n};\r\n\r\nexport function loadRowsSuccess(rows) {\r\n  return { type: types.LOAD_ROWS_SUCCESS, rows };\r\n}\r\n\r\nexport function createRowSuccess(row) {\r\n  return { type: types.CREATE_ROW_SUCCESS, row };\r\n}\r\n\r\nexport const updateRowSuccess = (id, data) => {\r\n  return { type: types.UPDATE_ROW_SUCCESS, id, data };\r\n};\r\n\r\nexport const deleteRowOptimistic = id => {\r\n  return { type: types.DELETE_ROW_OPTIMISTIC, id };\r\n};\r\n\r\nexport function loadRows() {\r\n  return function(dispatch) {\r\n    return recordsAPI\r\n      .getAll()\r\n      .then(rows => {\r\n        dispatch(loadRowsSuccess(rows));\r\n      })\r\n      .catch(error => {\r\n        console.log(error.message);\r\n      });\r\n  };\r\n}\r\n\r\nexport function createRow(row) {\r\n  return function(dispatch) {\r\n    dispatch(createRowSuccess(row));\r\n    return recordsAPI.create(row).catch(error => {\r\n      console.log(error.message);\r\n    });\r\n  };\r\n}\r\n\r\nexport function updateRow(id, data) {\r\n  return function(dispatch) {\r\n    dispatch(updateRowSuccess(id, data));\r\n    return recordsAPI.update(id, data).catch(error => {\r\n      console.log(error.message);\r\n    });\r\n  };\r\n}\r\n\r\nexport function deleteRow(id) {\r\n  return function(dispatch) {\r\n    dispatch(deleteRowOptimistic(id));\r\n    return recordsAPI.remove(id).catch(error => {\r\n      console.log(error.message);\r\n    });\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { formOnChange, createRow } from \"../redux/actions/rowActions\";\r\n\r\nclass Form extends Component {\r\n  handleOnSubmit = e => {\r\n    e.preventDefault();\r\n    this.refs.date.value = \"\";\r\n    this.refs.title.value = \"\";\r\n    this.refs.amount.value = \"\";\r\n  };\r\n\r\n  newRowsData = () => {\r\n    return {\r\n      date: this.props.state.rowsData.date,\r\n      title: this.props.state.rowsData.title,\r\n      amount: Number.parseInt(this.props.state.rowsData.amount)\r\n    };\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n        onSubmit={e => {\r\n          this.handleOnSubmit(e);\r\n          this.props.createRow(this.newRowsData());\r\n        }}\r\n        className=\"form-inline mb-3\"\r\n      >\r\n        <div className=\"form-group mr-1\">\r\n          <input\r\n            onChange={this.props.formOnChange}\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Date\"\r\n            name=\"date\"\r\n            ref=\"date\"\r\n            // value={props.state.date}\r\n          />\r\n        </div>\r\n        <div className=\"form-group mr-1\">\r\n          <input\r\n            onChange={this.props.formOnChange}\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Title\"\r\n            name=\"title\"\r\n            ref=\"title\"\r\n            // value={props.state.title}\r\n          />\r\n        </div>\r\n        <div className=\"form-group mr-1\">\r\n          <input\r\n            onChange={this.props.formOnChange}\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Amount\"\r\n            name=\"amount\"\r\n            ref=\"amount\"\r\n            // value={props.state.amount}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\" disabled=\"\">\r\n          {\" \"}\r\n          Create Record\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    state\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    formOnChange: id => {\r\n      dispatch(formOnChange(id));\r\n    },\r\n    createRow: data => {\r\n      dispatch(createRow(data));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Form);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport * as rowActions from \"../redux/actions/rowActions\";\r\n\r\nclass Row extends Component {\r\n  state = {\r\n    isEdit: true\r\n  };\r\n\r\n  handleToggle = () => {\r\n    this.setState({ isEdit: !this.state.isEdit });\r\n  };\r\n\r\n  handleUpdate = id => {\r\n    return {\r\n      id: this.props.entry.id,\r\n      date: this.refs.date.value,\r\n      title: this.refs.title.value,\r\n      amount: Number.parseInt(this.refs.amount.value)\r\n    };\r\n  };\r\n\r\n  rowDisplay() {\r\n    return (\r\n      <tr>\r\n        <td>{this.props.entry.date}</td>\r\n        <td>{this.props.entry.title}</td>\r\n        <td>{this.props.entry.amount}</td>\r\n        <td>\r\n          <button className=\"btn btn-info mr-1\" onClick={this.handleToggle}>\r\n            Edit\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              this.props.actions.deleteRow(this.props.entry.id);\r\n            }}\r\n            className=\"btn btn-danger\"\r\n          >\r\n            Delete\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  rowEdit() {\r\n    return (\r\n      <tr>\r\n        <td>\r\n          <input\r\n            className=\"form-control\"\r\n            defaultValue={this.props.entry.date}\r\n            ref=\"date\"\r\n          />\r\n        </td>\r\n        <td>\r\n          <input\r\n            className=\"form-control\"\r\n            defaultValue={this.props.entry.title}\r\n            ref=\"title\"\r\n          />\r\n        </td>\r\n        <td>\r\n          <input\r\n            className=\"form-control\"\r\n            defaultValue={this.props.entry.amount}\r\n            ref=\"amount\"\r\n          />\r\n        </td>\r\n        <td>\r\n          <button\r\n            className=\"btn btn-info mr-1\"\r\n            onClick={() => {\r\n              this.handleUpdate(this.props.entry.id);\r\n              this.props.actions.updateRow(\r\n                this.props.entry.id,\r\n                this.handleUpdate()\r\n              );\r\n\r\n              this.handleToggle();\r\n            }}\r\n          >\r\n            Update\r\n          </button>\r\n          <button onClick={this.handleToggle} className=\"btn btn-danger\">\r\n            Cancel\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return this.state.isEdit ? this.rowDisplay() : this.rowEdit();\r\n  }\r\n}\r\n\r\nRow.propTypes = {\r\n  actions: PropTypes.object.isRequired,\r\n  entry: PropTypes.object.isRequired\r\n};\r\n\r\nfunction mapStateToProps({ data }) {\r\n  return {\r\n    data\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: bindActionCreators(rowActions, dispatch)\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Row);\r\n","import React from \"react\";\r\nimport Row from \"./Row\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Table = props => {\r\n  const CHECKDATA = () =>\r\n    props.status !== 200 ? (\r\n      <td colSpan={4} className=\"bg-success text-white\">\r\n        {\" \"}\r\n        Loading...\r\n      </td>\r\n    ) : (\r\n      <td colSpan={4} className=\"bg-info text-white\">\r\n        {\" \"}\r\n        No Data...\r\n      </td>\r\n    );\r\n\r\n  const { rowData } = props;\r\n  return (\r\n    <div>\r\n      <table className=\"table table-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <td>Date</td>\r\n            <td>Title</td>\r\n            <td>Amount</td>\r\n            <td>Actions</td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {rowData && rowData.length ? (\r\n            rowData.map(entry => <Row key={entry.id} entry={entry} />)\r\n          ) : (\r\n            <tr>\r\n              <CHECKDATA />\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    rowData: state.rowsData.data\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Table);\r\n","import React, { Component } from \"react\";\r\n\r\nimport Box from \"./Box\";\r\nimport Form from \"./Form\";\r\nimport Table from \"./Table\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { loadRows } from \"../redux/actions/rowActions\";\r\n\r\nclass Dashboard extends Component {\r\n  componentDidMount() {\r\n    const { rowsData, loadRows } = this.props;\r\n    if (rowsData.data.length === 0) {\r\n      loadRows().catch(error => {\r\n        console.log(error.message);\r\n      });\r\n    }\r\n  }\r\n\r\n  credit = () => {\r\n    let amount = this.props.rowsData.data.reduce((prevValue, currentValue) => {\r\n      if (currentValue.amount > 0) {\r\n        return prevValue + currentValue.amount;\r\n      } else {\r\n        return prevValue;\r\n      }\r\n    }, 0);\r\n    return amount;\r\n  };\r\n\r\n  debit = () => {\r\n    let amount = this.props.rowsData.data.reduce((prevValue, currentValue) => {\r\n      if (currentValue.amount < 0) {\r\n        return prevValue + currentValue.amount;\r\n      } else {\r\n        return prevValue;\r\n      }\r\n    }, 0);\r\n    return amount;\r\n  };\r\n\r\n  balance = () => {\r\n    return this.debit() + this.credit();\r\n  };\r\n\r\n  getDataFromRow = (data, id) => {\r\n    let index = this.props.rowsData.data.findIndex(x => x.id === id);\r\n\r\n    if (index === -1) {\r\n      console.log(\"upading index not found\");\r\n    } else {\r\n      this.setState({\r\n        data: [\r\n          ...this.props.rowsData.data.slice(0, index),\r\n          Object.assign({}, this.props.rowsData.data[index], data),\r\n          ...this.props.rowsData.data.slice(index + 1)\r\n        ]\r\n      });\r\n      return;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row mb-3\">\r\n          <Box heading={\"Credit\"} amount={this.credit()} bgType={\"success\"} />\r\n          <Box heading={\"Debit\"} amount={this.debit()} bgType={\"danger\"} />\r\n          <Box heading={\"Balance\"} amount={this.balance()} bgType={\"info\"} />\r\n        </div>\r\n        <Form />\r\n\r\n        <Table status={this.props.rowsData.status} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDashboard.propTypes = {\r\n  rowsData: PropTypes.object.isRequired\r\n};\r\n\r\nfunction mapStateToProps({ rowsData }) {\r\n  return {\r\n    rowsData\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  loadRows\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Dashboard);\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Dashboard from \"./components/Dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Dashboard />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default {\r\n  date: \"\",\r\n  title: \"\",\r\n  amount: \"\",\r\n  data: []\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport rowsData from \"./rowReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  rowsData\r\n});\r\n\r\nexport default rootReducer;\r\n","import * as types from \"../actions/actionTypes\";\r\nimport intialState from \"./intialState\";\r\n\r\nexport default function rowReducer(state = intialState, action) {\r\n  switch (action.type) {\r\n    case types.LOAD_ROWS_SUCCESS:\r\n      console.log(\"Data has been loaded\");\r\n      return action.rows;\r\n\r\n    case types.DELETE_ROW_OPTIMISTIC:\r\n      console.log(\"Row has been deleted\");\r\n\r\n      // recordsAPI.remove(1);\r\n\r\n      const newRow = state.data.filter(post => {\r\n        // console.log(post.id + \" : \" + action.id);\r\n        return post.id !== action.id;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        data: newRow\r\n      };\r\n\r\n    // return state;\r\n\r\n    case types.UPDATE_ROW_SUCCESS:\r\n      console.log(\"Row has been updated\");\r\n\r\n      let index = state.data.findIndex(x => x.id === action.id);\r\n\r\n      const newTest = {\r\n        ...state,\r\n        data: [\r\n          ...state.data.slice(0, index),\r\n          Object.assign({}, state.data[index], action.data),\r\n          ...state.data.slice(index + 1)\r\n        ]\r\n      };\r\n\r\n      return newTest;\r\n\r\n    case types.FORM_ONCHANGE:\r\n      console.log(\"form has being changing\");\r\n\r\n      const name = action.e.target.name;\r\n      const value = action.e.target.value;\r\n\r\n      // debugger;\r\n\r\n      let obj = {};\r\n\r\n      obj[\"\" + name] = value;\r\n\r\n      const updateCurrentState = {\r\n        ...state,\r\n        ...obj\r\n      };\r\n\r\n      return updateCurrentState;\r\n\r\n    case types.FORM_SUBMIT:\r\n      action.e.preventDefault();\r\n\r\n      console.log(\"form has been submitted\");\r\n\r\n      const newPost = {\r\n        ...state,\r\n        data: [\r\n          ...state.data,\r\n          {\r\n            id: Math.random(),\r\n            date: state.date,\r\n            title: state.title,\r\n            amount: Number.parseInt(state.amount)\r\n          }\r\n        ]\r\n      };\r\n\r\n      return newPost;\r\n\r\n    case types.CREATE_ROW_SUCCESS:\r\n      console.log(\"Row has been created\");\r\n\r\n      const newData = {\r\n        ...state,\r\n        data: [...state.data, { ...action.row, id: Math.random() }]\r\n      };\r\n\r\n      return newData;\r\n\r\n    case \"CREDIT\":\r\n      console.log(\"amount has been credited\");\r\n      return state;\r\n\r\n    case \"DEBIT\":\r\n      console.log(\"amount has been debited\");\r\n      return state;\r\n\r\n    default:\r\n      // console.log(\"Default State\");\r\n      return state;\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport configureStore from './redux/configureStore';\nimport { Provider as ReduxProvider } from 'react-redux'\n\nconst store = configureStore();\n\nReactDOM.render(\n  <ReduxProvider store={store}>\n    <App />\n  </ReduxProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\nimport reduxImmutableStateInvariant from \"redux-immutable-state-invariant\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport default function configureStore(initialState) {\r\n  const compseEnhancers =\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n  return createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compseEnhancers(applyMiddleware(thunk, reduxImmutableStateInvariant()))\r\n  );\r\n}\r\n"],"sourceRoot":""}